package ui;

import java.util.Objects;
import java.util.concurrent.TimeUnit;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import taskmanager.TaskManager;

/**
 * Controller for the main GUI.
 */
public class MainWindow extends AnchorPane {
    @FXML
    private ScrollPane scrollPane;
    @FXML
    private VBox dialogContainer;
    @FXML
    private TextField userInput;
    @FXML
    private Button sendButton;

    private TaskManager taskManager;

    private final Image userImage = new Image(
            Objects.requireNonNull(this.getClass().getResourceAsStream("/images/userIcon.png")));
    private final Image botImage = new Image(
            Objects.requireNonNull(this.getClass().getResourceAsStream("/images/robotIcon.png")));

    /**
     * Initializes the main window, setting up the scroll pane to the bottom when new content is added.
     */
    @FXML
    public void initialize() {
        // the following lines are generated by ChatGPT
        // to fix the bug where the scroll pane does not
        // response to the mouse scroll wheel
        dialogContainer.heightProperty().addListener((obs, oldVal, newVal) -> {
            scrollPane.setVvalue(1.0);
        });
    }

    /**
     * Injects the TaskBot instance
     */
    public void setTaskManager(TaskManager d) {
        taskManager = d;
        String greetingMessage = "Beep! Hi, I'm TaskBot.\nI can help you manage your tasks.\n\n";
        greetingMessage += taskManager.getResponse("list");
        greetingMessage += "\nWhat can I do for you?";
        dialogContainer.getChildren().addAll(
                DialogBox.getDukeDialog(greetingMessage, botImage)
        );
    }

    /**
     * Creates two dialog boxes, one echoing user input and the other containing Duke's reply and then appends them to
     * the dialog container. Clears the user input after processing.
     */
    @FXML
    private void handleUserInput() {
        String input = userInput.getText().trim();
        if (input.trim().isEmpty()) {
            return;
        }
        String response;
        try {
            response = taskManager.getResponse(input);
            dialogContainer.getChildren().addAll(
                    DialogBox.getUserDialog(input, userImage),
                    DialogBox.getDukeDialog(response, botImage)
            );
        } catch (Exception e) {
            response = "Error! " + e.getMessage();
            dialogContainer.getChildren().addAll(
                    DialogBox.getUserDialog(input, userImage),
                    DialogBox.getDukeDialog(response, botImage, true)
            );
        }

        userInput.clear();

        if (input.equals("bye")) {
            triggerExit();
        }
    }

    private void triggerExit() {
        new Thread(() -> {
            try {
                TimeUnit.SECONDS.sleep(1);
                Platform.exit();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }
}
